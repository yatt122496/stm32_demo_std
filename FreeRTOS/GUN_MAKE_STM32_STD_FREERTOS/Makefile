##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.13.0-B3] date: [Tue Apr 27 19:17:25 CST 2021]
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

# Tip :
#	使用GUN编译STM32标准库时，需要修改 core_cm3.c 文件
#	736 行改为：
#	__ASM volatile ("strexb %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
#	753 行改为：
#	__ASM volatile ("strexh %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );

#	如果使用了正点原子的 sys.c 文件，需要修改 sys.c 文件
# MSR_MSP 函数改为：

# #ifdef __GNUC__
# void MSR_MSP(u32 addr)
# {
# 	__ASM volatile ("MSR MSP, r0\n\t"
#                  "BX r14     \n\t" : : "r" (addr) );
# }
# #else
# __ASM void MSR_MSP(u32 addr)
# {
# 	// MSR MSP, r0 			//set Main Stack value
#     // BX r14
# }
# #endif

#	GUN 支持 printf		添加以下代码

# #ifdef __GNUC__
# int _write(int fd, char *ptr, int len)
# {
#     int i = 0;
#     /*
#      * write "len" of char from "ptr" to file id "fd"
#      * Return number of char written.
#      *
#     * Only work for STDOUT, STDIN, and STDERR
#      */
#     if (fd > 2) {
#         return -1;
#     }
#     while (*ptr && (i < len)) {
# 		while((USART1->SR&0X40)==0);//循环发送,直到发送完毕
#     	USART1->DR = (u8) *ptr;
#         // if (*ptr == '\n') {
#         //     while((USART1->SR&0X40)==0);//循环发送,直到发送完毕
#     	// 	USART1->DR = (u8) '\r';
#         // }
#         i++;
#         ptr++;
#     }
#     return i;
# }
# #endif

######################################
# target
######################################
# TARGET = $(notdir $(CURDIR))		#设置生成目标名为工程文件夹名
TARGET = target

######################################
# building variables
######################################
# 是否会进行调试
DEBUG = 1

# optimization    ## 选择优化等级，优化等级低->高，可参考Keil的设置，如果程序运行不理想，优化程序或降低优化等级
# OPT = -O0        ## 没有优化。
# OPT = -O1        ## 编译器试图减少代码大小和执行时间，而不执行任何花费大量编译时间的优化。
OPT = -Og         ## 参数 -Og 是在 -O1 的基础上，去掉了那些影响调试的优化告诉编译器，编译后的代码不要影响调试，但调试信息的生成还是靠 -g 参数的。
# OPT = -O2        ## 更加优化。GCC执行几乎所有支持的优化，不涉及空间速度权衡。此选项既增加编译时间，提高了生成代码的性能。
# OPT = -O3        ## 优化更多。
# OPT = -Os        ## 优化大小。启用所有优化，除了那些经常增加代码大小
# OPT = -Ofast     ## 不遵守严格的标准。使所有优化。它还支持并非对所有符合标准的程序都有效的优化。

#######################################
# paths
#######################################
# Build path      ## Build编译产生的文件存放目录 , Output生成hex与bin的存放位置
BUILD_DIR = Build
OUT_DIR = $(BUILD_DIR)/Output

######################################
# source
######################################
# C sources
# source                           ## 检索项目目录下的c文件的，注意C大小写
C_SOURCES =  \
$(wildcard USER/*.c) \
$(wildcard SYSTEM/*/*.c) \
$(wildcard HARDWARE/*/*.c) \
$(wildcard FreeRTOS/*.c) \
FreeRTOS/portable/GCC/ARM_CM3/port.c \
FreeRTOS/portable/MemMang/heap_4.c \
CORE/core_cm3.c \
STM32F10x_FWLib/src/misc.c \
STM32F10x_FWLib/src/stm32f10x_gpio.c \
STM32F10x_FWLib/src/stm32f10x_rcc.c \
STM32F10x_FWLib/src/stm32f10x_usart.c

# ASM sources
ASM_SOURCES =  \
GUN/startup_stm32f10x_hd_gun.s

# macros for gcc
# AS defines
AS_DEFS =

# AS includes
AS_INCLUDES =

# C defines
C_DEFS =  \
-DSTM32F10X_HD \
-DUSE_STDPERIPH_DRIVER

# C includes
C_INCLUDES =  \
-ICORE \
-ISTM32F10x_FWLib/inc \
-IUSER \
$(addprefix -I, $(wildcard SYSTEM/*)) \
$(addprefix -I, $(wildcard HARDWARE/*)) \
$(addprefix -I, $(wildcard FreeRTOS/include)) \
$(addprefix -I, $(wildcard FreeRTOS/portable/GCC/ARM_CM3)) \
-I.

# link script
LDSCRIPT = GUN/STM32F103ZETx_FLASH.ld

# cpu
CPU = -mcpu=cortex-m3

# fpu
# NONE for Cortex-M0/M0+/M3

# float-abi


# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

GCC_PATH = "C:/ST/STM32CubeIDE_1.6.0/STM32CubeIDE/plugins/com.st.stm32cube.ide.mcu.externaltools.gnu-tools-for-stm32.9-2020-q2-update.win32_1.5.0.202011040924/tools/bin"
#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S

#######################################
# CFLAGS
#######################################

# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"


#######################################
# LDFLAGS
#######################################

# libraries
LIBS = -lc -lm -lnosys
LIBDIR =
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

# default action: build all
PHONY += all
all: $(BUILD_DIR)/$(TARGET).elf $(OUT_DIR)/$(TARGET).hex $(OUT_DIR)/$(TARGET).bin

#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR)
	@$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@
	@echo CC $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	@$(AS) -c $(CFLAGS) $< -o $@
	@echo AS $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	@$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	@echo CC $@
	@$(SZ) $@
	@echo SZ $@

$(OUT_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(OUT_DIR)
	@$(HEX) $< $@
	@echo HEX $< $@

$(OUT_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(OUT_DIR)
	@$(BIN) $< $@
	@echo BIN $< $@

$(BUILD_DIR):
	mkdir -p $@

$(OUT_DIR):
	mkdir -p $@


#######################################
# expand
#######################################
expand_define = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.i)))
PHONY += expand
expand:$(expand_define)
$(BUILD_DIR)/%.i: %.c Makefile | $(BUILD_DIR)
	@$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -E -o $@
	@echo CC $< -E -o $@


#######################################
# install
#######################################
##	变量 O 用来设置目标文件输出目录，默认为当前目录
ifeq ("$(origin O)", "command line")
  INSTALL_DIR := $(O)
else
  INSTALL_DIR = ./
endif

ifneq ($(INSTALL_DIR),)
# Invoke a second make in the output directory, passing relevant variables
# check that the output directory actually exists
saved-output := $(INSTALL_DIR)
INSTALL_DIR := $(shell mkdir -p $(INSTALL_DIR) && cd $(INSTALL_DIR) \
								&& pwd)
$(if $(INSTALL_DIR),, \
     $(error failed to create output directory "$(saved-output)"))
endif

PHONY += install
install:
	-cp -fR $(OUT_DIR)/$(TARGET).* $(INSTALL_DIR)

#######################################
# print
#######################################
# PHONY += print
# print:$(expand_define)
# $(BUILD_DIR)/%.i: %.c Makefile | $(BUILD_DIR)
# 	@$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -E -o $@
# 	@echo CC $< -E -o $@
# 	@echo $?

#######################################
# hostarch
#######################################
HOSTARCH := $(shell uname -m | \
	sed -e s/i.86/x86/ \
	    -e s/sun4u/sparc64/ \
	    -e s/arm.*/arm/ \
	    -e s/sa110/arm/ \
	    -e s/ppc64/powerpc/ \
	    -e s/ppc/powerpc/ \
	    -e s/macppc/powerpc/\
	    -e s/sh.*/sh/)
PHONY += hostarch
hostarch:
	@echo hostarch=$(HOSTARCH)

#######################################
# hostos
#######################################
HOSTOS := $(shell uname -s | tr '[:upper:]' '[:lower:]' | \
	    sed -e 's/\(cygwin\).*/cygwin/')
PHONY += hostos
hostos:
	@echo hostos=$(HOSTOS)

#######################################
# clean up
#######################################
PHONY += clean
clean:
	-rm -fR $(BUILD_DIR)

#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

PHONY += FORCE
FORCE:

# Declare the contents of the .PHONY variable as phony.  We keep that
# information in a variable so we can use it in if_changed and friends.
.PHONY: $(PHONY)
# *** EOF ***
