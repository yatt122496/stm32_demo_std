##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.13.0-B3] date: [Tue Apr 27 19:17:25 CST 2021]
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

# Tip :
#	使用GUN编译STM32标准库时，需要修改 core_cm3.c 文件
#	736 行改为：
#	__ASM volatile ("strexb %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
#	753 行改为：
#	__ASM volatile ("strexh %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
#	如果使用了正点原子的 sys.c 文件，需要修改 sys.c 文件
#	MSR_MSP 函数改为：
# #ifdef __GNUC__
# void MSR_MSP(u32 addr)
# {
# 	__ASM volatile ("MSR MSP, r0\n\t"
# 					"BX r14     \n\t" : : "r" (addr) );
# }
# #else
# __ASM void MSR_MSP(u32 addr)
# {
# 	// MSR MSP, r0 			//set Main Stack value
# 	// BX r14
# }
# #endif
#	__align(x) u8 vlaue;	应改为	u8 vlaue __attribute__((aligned(x)));
######################################
# target
######################################
# TARGET = $(notdir $(CURDIR))		#设置生成目标名为工作文件夹名
TARGET = target

######################################
# building variables
######################################
# 是否会进行调试
DEBUG = 1

# optimization    ## 选择优化等级，优化等级低->高，可参考Keil的设置，如果程序运行不理想，优化程序或降低优化等级
#OPT = -O0        ## 没有优化。
#OPT = -O1        ## 编译器试图减少代码大小和执行时间，而不执行任何花费大量编译时间的优化。
OPT = -Og         ## 参数 -Og 是在 -O1 的基础上，去掉了那些影响调试的优化告诉编译器，编译后的代码不要影响调试，但调试信息的生成还是靠 -g 参数的。
#OPT = -O2        ## 更加优化。GCC执行几乎所有支持的优化，不涉及空间速度权衡。此选项既增加编译时间，提高了生成代码的性能。
#OPT = -O3        ## 优化更多。
#OPT = -Os        ## 优化大小。启用所有优化，除了那些经常增加代码大小
#OPT = -Ofast     ## 不遵守严格的标准。使所有优化。它还支持并非对所有符合标准的程序都有效的优化。

#######################################
# paths
#######################################
# Build path      ## Build编译产生的文件存放目录 , Output生成hex与bin的存放位置
BUILD_DIR = Build
OUT_DIR = $(BUILD_DIR)/Output

######################################
# source
######################################
# C sources
# source                           ## 检索项目目录下的c文件的，注意C大小写
C_SOURCES =  \
$(wildcard USER/*.c) \
$(wildcard SYSTEM/*/*.c) \
$(wildcard HARDWARE/*/*.c) \
$(wildcard MALLOC/*.c) \
$(wildcard FATFS/exfuns/*.c) \
$(wildcard FATFS/src/*.c) \
$(wildcard USMART/*.c) \
$(wildcard TEXT/*.c) \
CORE/core_cm3.c \
STM32F10x_FWLib/src/misc.c \
STM32F10x_FWLib/src/stm32f10x_gpio.c \
STM32F10x_FWLib/src/stm32f10x_fsmc.c \
STM32F10x_FWLib/src/stm32f10x_rcc.c \
STM32F10x_FWLib/src/stm32f10x_spi.c \
STM32F10x_FWLib/src/stm32f10x_tim.c \
STM32F10x_FWLib/src/stm32f10x_sdio.c \
STM32F10x_FWLib/src/stm32f10x_dma.c \
STM32F10x_FWLib/src/stm32f10x_usart.c

# ASM sources
ASM_SOURCES =  \
CORE/startup_stm32f10x_hd_gun.s

# macros for gcc
# AS defines
AS_DEFS =

# AS includes
AS_INCLUDES =

# C defines
C_DEFS =  \
-DSTM32F10X_HD \
-DUSE_STDPERIPH_DRIVER

# C includes
C_INCLUDES =  \
-I. \
-ICORE \
-ISTM32F10x_FWLib/inc \
-IUSER \
-ISYSTEM/delay \
-ISYSTEM/sys \
-ISYSTEM/usart \
-IHARDWARE/KEY \
-IHARDWARE/LED \
-IHARDWARE/LCD \
-IHARDWARE/SDIO \
-IHARDWARE/SPI \
-IHARDWARE/W25QXX \
-IFATFS/exfuns \
-IFATFS/src \
-ITEXT \
-IUSMART

# link script
LDSCRIPT = STM32F103ZETx_FLASH.ld

# cpu
CPU = -mcpu=cortex-m3

# fpu
# NONE for Cortex-M0/M0+/M3

# float-abi


# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# GCC_PATH = "C:/ST/STM32CubeIDE_1.6.0/STM32CubeIDE/plugins/com.st.stm32cube.ide.mcu.externaltools.gnu-tools-for-stm32.9-2020-q2-update.win32_1.5.0.202011040924/tools/arm-none-eabi/bin"
GCC_PATH = "C:/ST/STM32CubeIDE_1.6.0/STM32CubeIDE/plugins/com.st.stm32cube.ide.mcu.externaltools.gnu-tools-for-stm32.9-2020-q2-update.win32_1.5.0.202011040924/tools/bin"
#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S

#######################################
# CFLAGS
#######################################

# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"


#######################################
# LDFLAGS
#######################################

# libraries
LIBS = -lc -lm -lnosys
LIBDIR =
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(OUT_DIR)/$(TARGET).hex $(OUT_DIR)/$(TARGET).bin


#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR)
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

$(OUT_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(OUT_DIR)
	$(HEX) $< $@

$(OUT_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(OUT_DIR)
	$(BIN) $< $@

$(BUILD_DIR):
	mkdir $@

$(OUT_DIR):
	mkdir $@

#######################################
# clean up
#######################################
.PHONY : clean
clean:
	-rm -fR $(BUILD_DIR)

#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***
